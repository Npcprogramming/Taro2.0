import logging
import os
import sqlite3
import pytz
import types
from datetime import datetime, time, timedelta

from telegram import Update, ReplyKeyboardRemove, InputFile, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

from config import TELEGRAM_BOT_TOKEN, ADMIN_TELEGRAM_IDS  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
from ai_utils import get_ai_description
from personal_account import (
    personal_account,
    get_zodiac_sign,
    initialize_db as initialize_personal_account_db,
)
from menu_functions import (
    daily_card,
    send_news,
    show_history,
    subscribe,
    help_command,
    settings_menu,
    settings_menu_keyboard,
    main_menu,
    handle_message,
    request_feedback,
    initialize_menu_functions
)
from card_search import (
    start_card_search,
    handle_suit_selection,
    handle_card_selection
)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
logs_dir = os.path.join(BASE_DIR, 'logs')
os.makedirs(logs_dir, exist_ok=True)

current_date = datetime.now().strftime('%d.%m.%Y')
log_file = os.path.join(logs_dir, f'bot_log_{current_date}.log')

log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(log_formatter)
file_handler.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logging.basicConfig(level=logging.INFO, handlers=[file_handler, console_handler])
logger = logging.getLogger(__name__)

conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
    CREATE TABLE IF NOT EXISTS history (
        user_id INTEGER,
        date TEXT,
        card TEXT,
        is_reversed INTEGER,
        type TEXT DEFAULT 'daily_card'
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        user_id INTEGER PRIMARY KEY,
        expires_at TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        nickname TEXT,
        birth_date TEXT,
        zodiac_sign TEXT,
        avatar TEXT,
        total_cards INTEGER DEFAULT 0,
        straight_cards INTEGER DEFAULT 0,
        reversed_cards INTEGER DEFAULT 0,
        consecutive_days INTEGER DEFAULT 0,
        last_card_date TEXT
    )
''')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ expires_at, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    cursor.execute("ALTER TABLE subscriptions ADD COLUMN expires_at TEXT")
except sqlite3.OperationalError:
    pass

conn.commit()
initialize_personal_account_db(conn, cursor)
initialize_menu_functions(conn, cursor, BASE_DIR)

ASK_NICKNAME, ASK_BIRTHDATE = range(2)

def main_menu_keyboard(user_id=None):
    buttons = [
        ['üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è', 'üìú –ò—Å—Ç–æ—Ä–∏—è'],
        ['üì∞ –ù–æ–≤–æ—Å—Ç–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã']  
    ]
    if user_id:
        cursor.execute("SELECT 1 FROM subscriptions WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            buttons.append(['üíé –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø'])
    else:
        buttons.append(['üíé –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø'])
    buttons.append(['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start.")
    context.user_data.setdefault('daily_card_date', None)
    context.user_data['BASE_DIR'] = BASE_DIR

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user.id,))
    user_data = cursor.fetchone()

    if user_data is None:
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
                                        reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return ASK_NICKNAME
    else:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data[1]}!",
            reply_markup=main_menu_keyboard(user.id)
        )
        return ConversationHandler.END

async def ask_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nickname'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return ASK_BIRTHDATE

async def save_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    birthdate_str = update.message.text.strip()
    try:
        birthdate = datetime.strptime(birthdate_str, "%d.%m.%Y")
        zodiac_sign = get_zodiac_sign(birthdate.day, birthdate.month)
        nickname = context.user_data['nickname']
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, nickname, birth_date, zodiac_sign) VALUES (?, ?, ?, ?)",
            (user.id, nickname, birthdate_str, zodiac_sign)
        )
        conn.commit()
        await update.message.reply_text(
            f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–ù–∏–∫: {nickname}\n–î–∞—Ç–∞: {birthdate_str}\n–ó–Ω–∞–∫: {zodiac_sign}",
            reply_markup=main_menu_keyboard(user.id)
        )
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return ASK_BIRTHDATE
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard(user.id))
    return ConversationHandler.END

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    feedback_text = ' '.join(context.args)
    if feedback_text:
        await context.bot.send_message(ADMIN_TELEGRAM_IDS[0], text=f"–û—Ç–∑—ã–≤ –æ—Ç {user.username} ({user.id}):\n{feedback_text}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /feedback")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard(user.id))

async def send_daily_cards(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().date()
    cursor.execute("SELECT user_id, expires_at FROM subscriptions")
    for user_id, expires_at in cursor.fetchall():
        if expires_at and datetime.strptime(expires_at, "%Y-%m-%d").date() >= today:
            class DummyMessage:
                def __init__(self, user_id):
                    self.chat_id = user_id
                    self.from_user = types.SimpleNamespace(id=user_id, username='', first_name='')
                    self.message_id = None
                    self.text = ''
            dummy_update = Update(update_id=0, message=DummyMessage(user_id))
            await daily_card(dummy_update, context)

async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üíé *–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ AI-—Å–æ–≤–µ—Ç–∞–º*\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ üß†\n\n"
        "üí≥ *–¶–µ–Ω–∞*: 499 —Ä—É–±\n"
        "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É: `4276 5600 1773 5988`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ üì∏. –ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.\n"
        "_–î–ª—è —Å–≤—è–∑–∏: @looperproper_"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        file_path = f"payment_proof_{user.id}.jpg"
        await file.download_to_drive(file_path)
        caption = f"üßæ –ß–µ–∫ –æ—Ç @{user.username or 'user'} (ID: {user.id})\nüëâ /activate {user.id}"
        await context.bot.send_photo(chat_id=ADMIN_TELEGRAM_IDS[0], photo=InputFile(file_path), caption=caption)
        await update.message.reply_text("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ.")

async def activate_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMIN_TELEGRAM_IDS:
        await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if context.args:
        try:
            user_id = int(context.args[0])
            expires_at = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
            cursor.execute("""
                INSERT INTO subscriptions (user_id, expires_at)
                VALUES (?, ?)
                ON CONFLICT(user_id) DO UPDATE SET expires_at = excluded.expires_at
            """, (user_id, expires_at))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {expires_at}")
            await context.bot.send_message(user_id, text=f"üéâ –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expires_at}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /activate <user_id>")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_TELEGRAM_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    cursor.execute("SELECT users.user_id, nickname, zodiac_sign, expires_at FROM users JOIN subscriptions ON users.user_id = subscriptions.user_id ORDER BY expires_at DESC")
    users = cursor.fetchall()
    if not users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return
    message = "üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏:\n\n"
    for uid, nick, sign, expires in users:
        message += f"üë§ {nick} | ID: {uid}\n‚ôà –ó–Ω–∞–∫: {sign} | –¥–æ: {expires}\n\n"
    await update.message.reply_text(message)

def main():
    try:
        app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                ASK_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthdate)],
                ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_user_profile)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        app.add_handler(conv_handler)
        app.add_handler(CommandHandler('help', help_command))
        app.add_handler(CommandHandler('history', show_history))
        app.add_handler(CommandHandler('subscribe', subscribe))
        app.add_handler(CommandHandler('feedback', feedback))
        app.add_handler(CommandHandler('premium', premium_command))
        app.add_handler(CommandHandler('activate', activate_premium))
        app.add_handler(CommandHandler('adminpanel', admin_panel))
        app.add_handler(MessageHandler(filters.PHOTO, handle_payment_proof))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã$'), start_card_search))
        app.add_handler(CallbackQueryHandler(handle_suit_selection, pattern='^suit_'))
        app.add_handler(CallbackQueryHandler(handle_card_selection, pattern='^card_'))

        target_time = time(hour=12, minute=0, tzinfo=pytz.timezone('Europe/Moscow'))
        app.job_queue.run_daily(send_daily_cards, time=target_time)

        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()

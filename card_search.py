import os
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import ContextTypes

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ cards_data.py —É –≤–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å "cards":
# cards = {
#   "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π": {
#       "description": "...",
#       "advice": "...",
#       "image_file": "tuz_pentakley.jpg"
#   },
#   ...
# }
from cards_data import cards

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ–π –∏ –≤—Ö–æ–¥—è—â–∏—Ö –≤ –Ω–∏—Ö –∫–∞—Ä—Ç
SUITS = {
    "Major": [
        "–®—É—Ç", "–ú–∞–≥", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–í–µ—Ä—Ö–æ–≤–Ω—ã–π –∂—Ä–µ—Ü",
        "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
        "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–∏–ª–∞", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
    ],
    "Pentacles": [
        "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–≤–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–¢—Ä–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "–ü—è—Ç—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–®–µ—Å—Ç—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–°–µ–º—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "–í–æ—Å—å–º—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ–≤—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π"
    ],
    "Wands": [
        "–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤",
        "–ü—è—Ç—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–®–µ—Å—Ç—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–°–µ–º—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤",
        "–í–æ—Å—å–º—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤",
        "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤"
    ],
    "Cups": [
        "–¢—É–∑ –ö—É–±–∫–æ–≤", "–î–≤–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–¢—Ä–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤",
        "–ü—è—Ç—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–®–µ—Å—Ç—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–°–µ–º—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤",
        "–í–æ—Å—å–º—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ–≤—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ö—É–±–∫–æ–≤",
        "–ü–∞–∂ –ö—É–±–∫–æ–≤", "–†—ã—Ü–∞—Ä—å –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫–æ–≤"
    ],
    "Swords": [
        "–¢—É–∑ –ú–µ—á–µ–π", "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π", "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ú–µ—á–µ–π",
        "–ü—è—Ç—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–®–µ—Å—Ç—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–°–µ–º—ë—Ä–∫–∞ –ú–µ—á–µ–π",
        "–í–æ—Å—å–º—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π",
        "–ü–∞–∂ –ú–µ—á–µ–π", "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π"
    ]
}


def suits_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–∏ (–Ω–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    keyboard = [
        [
            InlineKeyboardButton("üßø –ü–µ–Ω—Ç–∞–∫–ª–∏ üßø", callback_data='suit_Pentacles'),
            InlineKeyboardButton("üåø –ñ–µ–∑–ª—ã üåø", callback_data='suit_Wands'),
        ],
        [
            InlineKeyboardButton("üç∑ –ö—É–±–∫–∏ üç∑", callback_data='suit_Cups'),
            InlineKeyboardButton("‚öîÔ∏è –ú–µ—á–∏ ‚öîÔ∏è", callback_data='suit_Swords'),
        ],
        [
            InlineKeyboardButton("üëë –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã üëë", callback_data='suit_Major'),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def create_card_buttons(suit_name: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Å—Ç–∏.
    """
    if suit_name not in SUITS:
        # –ï—Å–ª–∏ –º–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞—Å—Ç–µ–π.
        return suits_keyboard()

    cards_in_suit = SUITS[suit_name]
    keyboard = []
    row = []
    for idx, card_name in enumerate(cards_in_suit):
        row.append(InlineKeyboardButton(card_name, callback_data=f'card_{card_name}'))
        if (idx + 1) % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    # ¬´–ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç—è–º¬ª
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç—è–º", callback_data='suit_back')])
    return InlineKeyboardMarkup(keyboard)


async def start_card_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start_card_search –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º:
    1) –í–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ–º –º–µ–Ω—è—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã),
    2) –ù–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–∞—Å—Ç–µ–π).
    """
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã (–¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è).")

    # 1) –í–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
    msg_top = await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –±—É–¥—É—â–µ–º
    context.user_data["card_message_id"] = msg_top.message_id

    # 2) –ù–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–∞—Å—Ç–µ–π
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å:",
        reply_markup=suits_keyboard()
    )


async def handle_suit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç—å –∏–ª–∏ ¬´–ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç—è–º¬ª (–Ω–∞ –Ω–∏–∂–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏).
    –ú–µ–Ω—è–µ–º (edit_message_text) –Ω–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
     - –ª–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç,
     - –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–Ω–æ–ø–∫–∞–º –º–∞—Å—Ç–µ–π.
    –í–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
    """
    query = update.callback_query
    await query.answer()

    data = query.data
    # –ï—Å–ª–∏ 'suit_back': –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç—è–º
    if data == 'suit_back':
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å:",
            reply_markup=suits_keyboard()
        )
        return

    # –ò–Ω–∞—á–µ data = suit_XYZ
    _, suit_name = data.split('_', 1)
    new_kb = create_card_buttons(suit_name)

    # –ú–µ–Ω—è–µ–º –Ω–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç—å: {suit_name}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
        reply_markup=new_kb
    )


async def handle_card_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ –Ω–∏–∂–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –ú–ï–ù–Ø–ï–ú –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ) –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–∏–∂–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.
    """
    query = update.callback_query
    await query.answer()

    # card_–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π
    _, card_name = query.data.split('_', 1)
    card_info = cards.get(card_name)

    if not card_info:
        await query.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ ¬´{card_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    description = card_info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    advice = card_info.get("advice", "")
    image_file = card_info.get("image_file", "")

    caption = (
        f"üÉè {card_name}\n\n"
        f"{description}\n\n"
        f"üí° –°–æ–≤–µ—Ç: {advice}"
    )

    # –ò—â–µ–º message_id –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    top_msg_id = context.user_data.get("card_message_id")
    if not top_msg_id:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –±—ã–ª –¥—Ä—É–≥–∏–º
        await query.message.reply_text(caption)
        return

    chat_id = query.message.chat_id

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    base_dir = os.path.dirname(os.path.abspath(__file__))
    image_path = os.path.join(base_dir, 'images', image_file)

    # 1) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #    (—Ç.–∫. –æ–Ω–æ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–º, –∞ –º—ã —Ö–æ—Ç–∏–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ)
    from telegram.error import BadRequest
    try:
        await context.bot.delete_message(chat_id, top_msg_id)
    except BadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID={top_msg_id}: {e}")

    # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    if os.path.exists(image_path):
        with open(image_path, 'rb') as photo:
            new_msg = await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption
            )
    else:
        new_msg = await context.bot.send_message(chat_id=chat_id, text=caption)

    # 3) –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ message_id –≤ user_data, 
    #    —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã —Å–Ω–æ–≤–∞ —É–¥–∞–ª–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å
    context.user_data["card_message_id"] = new_msg.message_id

    # –ù–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–∞–º–∏) –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –º–µ–Ω—è–µ–º ‚Äî
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É (–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç—è–º).
